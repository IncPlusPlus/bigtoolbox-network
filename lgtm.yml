# ##########################################################################################
# # Customize file classifications.                                                        #
# # Results from files under any classifier will be excluded from LGTM                     #
# # statistics.                                                                            #
# ##########################################################################################
#
# ##########################################################################################
# # Use the `path_classifiers` block to define changes to the default classification of    #
# # files.                                                                                 #
# ##########################################################################################
#
# path_classifiers:
#   docs:
#     # Identify the top-level file called `generate_javadoc.py` as documentation-related.
#     - generate_javadoc.py
#   test:
#     # Override LGTM’s default classification of test files by excluding all files.
#     - exclude: /
#     # Classify all files in the top-level directories test/ and testsuites/ as test code.
#     - test
#     - testsuites
#     # Classify all files with suffix `.test` as test code.
#     #        Note: use only forward slash / as a path separator.
#     #        Use ** to indicate an arbitrary parent path.
#     #        Use * to indicate any sequence of characters excluding /.
#     #        Always enclose the expression in double quotes if it includes *.
#     - "**/*.test"
#     # Refine the classifications above by excluding files in test/util/.
#     - exclude: test/util
#   # The default behavior is to tag all files created during the
#   # build as `generated`. Results are hidden for generated code. You can tag
#   # further files as being generated by adding them to the `generated` section.
#   generated:
#     # Exclude all `*.c` files under the `ui/` directory from classification as
#     # generated code.
#   # By default, all files not checked into the repository are considered to be
#   # 'generated'.
#    - exclude: ui/**.c
#   # The default behavior is to tag library code as `library`. Results are hidden
#   # for library code. You can tag further files as being library code by adding them
#   # to the `library` section.
#   library:
#   # The default behavior is to tag template files as `template`. Results are hidden
#   # for template files. You can tag further files as being template files by adding
#   # them to the `template` section.
#   template:
#   # Define your own category, for example: 'some_custom_category'.
#   some_custom_category:
#     # Classify all files in the top-level directory tools/ (or the top-level file
#     # called tools).
#     - tools
#
# #########################################################################################
# # Use the `queries` block to change the default display of query results.               #
# #########################################################################################
#
# queries:
#   # Specifically hide the results of two queries.
#   - exclude: cpp/use-of-goto
#   - exclude: java/equals-on-unrelated-types
#   # Hide the results of all queries.
#   - exclude: "*"
#   # Refine by including the `java/command-line-injection` query.
#   - include: java/command-line-injection
#   # Include all queries tagged ‘security’ and ‘correctness', and with a severity of
#   # ‘error’.
#   - include:
#       tags:
#         - "security"
#         - "correctness"
#       severity: "error"
#
# #########################################################################################
# # Define changes to the default code extraction process.                                #
# # Each block configures the extraction of a single language, and modifies actions in a  #
# # named step. Every named step includes automatic default actions,                      #
# # except for the ‘prepare’ step. The steps are performed in the following sequence:     #
# # prepare                                                                               #
# # after_prepare                                                                         #
# # configure (C/C++ only)                                                                #
# # python_setup (Python only)                                                            #
# # before_index                                                                          #
# # index                                                                                 #
###########################################################################################
#
# #########################################################################################
# # Environment variables available to the steps:                                         #
# #########################################################################################
#
# # LGTM_SRC
# #   The root of the source tree.
# # LGTM_WORKSPACE
# #   An existing (initially empty) folder outside the source tree.
# #   Used for temporary download and setup commands.
#
# #########################################################################################
# # Use the extraction block to define changes to the default code extraction process     #
# # for one or more languages. The settings for each language are defined in a child      #
# # block, with one or more steps.                                                        #
# #########################################################################################
#
 extraction:
#   # Define settings for Java analysis
#   ####################################
   java:
#     # The `prepare` step exists for customization on LGTM.com only.
#     prepare:
#       packages:
#         - mono-devel
#         - mono-xbuild
     before_index:
       export lgtm=true
       export JAVA_HOME="/usr/lib/jvm/java-14-openjdk-amd64"
#     # Add an `after-prepare` step if you need to run commands after the prepare step.
#     # Each command should be listed on a separate line.
#     after_prepare:
#       - export PATH=$LGTM_WORKSPACE/tools:$PATH
#     # The `index` step extracts information from the files in the codebase.
     index:
#       Specify the Java version required to build the project.
       java_version: 14
#       # Specify Gradle settings.
#       gradle:
#         # Specify the required Gradle version.
#         # Default: determined automatically.
#         version: 4.4
#       # Specify Maven settings.
       maven:
#         # Specify the path (absolute or relative) of a Maven settings file to use.
#         # Default: Maven uses a settings file in the default location, if it exists.
#         settings_file: /opt/share/settings.xml
#         # Specify the path of a Maven toolchains file.
#         # Default: Maven uses a toolchains file in the default location, if it exists.
#         toolchains_file: /opt/share/toolchains.xml
#         # Specify the required Maven version.
#         # Default: the Maven version is determined automatically, where feasible.
         version: 3.6.3
#       # Specify how XML files should be extracted:
#       #   ALL = extract all XML files.
#       #   DEFAULT = only extract XML files named `AndroidManifest.xml`.
#       #   DISABLED = do not extract any XML files.
#       xml_mode: ALL
#       # Override the autobuild process by specifying a list of custom build commands
#       # to use instead.
       build_command:
         - echo $JAVA_HOME
         - mvn clean install
